Đồ án Quản Lý Dự Án Phần Mềm - Hướng dẫn quản lý mã nguồn: Github.
 
Sử dụng các thao tác quản lý mã nguồn trên Github. 
	-	Leader: Người quản lý repository, quản lý đồ án
	-	Sử dụng tập câu lệnh khi tạo repository (Dành cho leader)
		+ Khởi tạo repository
		git init
		git add .
		git commit -m "first commit"
		git branch -M main
		git remote add origin https://github.com/hkhuang07/FriendMart-Laravel-Website.git
		git push -u origin main
		
		+ Remote từ dự án có sẵn
		git remote add origin https://github.com/hkhuang07/FriendMart-Laravel-Website.git
		git branch -M main
		git push -u origin main
		
		+ Để cập nhật dùng tập câu lệnh sau:
		git pull origin main
		git add .
		git commit -m "Update Project"
		git push origin main
		
	-	Các thành viên (Member) khác cập nhật mã nguồn trên repository này cần thực hiện các thao tác git để đảm bảo an toàn mã nguồn và cập nhật dự án hiệu quả . 
	1. Thao tác của các thành viên trong nhóm
		Các thành viên này không nên thao tác trực tiếp lên nhánh main để tránh xung đột mã nguồn. 
		Thay vào đó, họ nên làm việc trên nhánh riêng của mình.
		Bước 1: Clone Repository về máy
			Không git init, các thành viên sẽ clone (nhân bản) repository về máy tính. 
			Đây là cách đúng đắn để bắt đầu làm việc trên một dự án đã có sẵn.
			Bash: 
				git clone https://github.com/hkhuang07/FriendMart-Laravel-Website.git
			Câu lệnh này sẽ tải toàn bộ mã nguồn về máy và tự động thiết lập kết nối với repository từ xa (origin).

		Bước 2: Tạo nhánh riêng để làm việc
			Trước khi bắt đầu code, mỗi thành viên nên tạo một nhánh (branch) riêng. 
			Tên nhánh nên tuân theo một quy tắc nhất định, branch/nguyenphuochuy, branch/buinguyenminhhuy, branch/phanchihai, branch/nguyenvukha...
			#Trong File Explore - Di chuyển vào FOLDER CHỨA THƯ MỤC DỰ ÁN VỪA Clone
			- click và vào FOLDER DỰ ÁN > chọn Open with GitBash
			- Bạn sẽ vào giao diện git bash để thực hiện các lệnh Git
			Bash: 
				  # Tạo một nhánh mới và chuyển sang nhánh đó
				  git checkout -b branch/nguyenvukha
		Bước 3: Cập nhật mã nguồn
			Trong quá trình làm việc, có thể các thành viên khác đã đẩy code mới lên nhánh main.
			Để đảm bảo mã nguồn của mình luôn mới nhất trước khi làm việc,thành viên đó cần kéo mã nguồn mới nhất từ nhánh main về nhánh của mình.
			Bash: 	# Chuyển về nhánh main để cập nhật
					git checkout main
					# Kéo mã nguồn từ main về
					git pull origin main
					# Quay lại nhánh làm việc
					git checkout branch/phanchihai
					# Hợp nhất (merge) những thay đổi từ main vào nhánh hiện tại
					git merge main
			Trong trường hợp có xung đột mã nguồn (merge conflict), Git sẽ thông báo. Thành viên cần giải quyết xung đột bằng tay trước khi tiếp tục.(Trao đổi nhóm tránh giải quyết 1 mình có thể ảnh hưởng xấu đến mã nguồn chung)

		Bước 4: Đẩy code lên nhánh riêng
			Sau khi hoàn thành công việc trên nhánh của mình, thành viên sẽ commit và push code lên repository.
			Bash: 	# Thêm các file đã thay đổi vào staging area
					git add .
					# Ghi lại thay đổi với thông điệp rõ ràng
					git commit -m "Cap nhat: Tinh nang A, B, C da duoc update"
					# Đẩy code lên nhánh mới trên GitHub
					git push origin branch/nguyenphuochuy
		Bước 5: Yêu cầu hợp nhất (Pull Request - PR)
		Đây là bước quan trọng nhất để đảm bảo an toàn mã nguồn. 
		- Thay vì trực tiếp hợp nhất vào nhánh main, thành viên sẽ tạo một Pull Request (PR) trên GitHub.
		- PR này là một yêu cầu để hợp nhất code từ nhánh của họ vào nhánh main.
		
		Người quản lý dự án, sẽ xem lại (review) PR đó.
		- Leader kiểm tra xem code có lỗi hay không, có tuân thủ các quy tắc không.
		- Nếu mọi thứ ổn, bạn sẽ chấp nhận (approve) và hợp nhất (merge) PR đó vào nhánh main.
		Thao tác này giúp kiểm soát chất lượng code trước khi nó được đưa vào nhánh chính của dự án.

	2. Các mẹo cần thiết để quản lý mã nguồn trên GitHub
		a. Thiết lập quy tắc cho nhánh main
		Bạn nên thiết lập quy tắc bảo vệ nhánh (branch protection rules) cho nhánh main trên GitHub. Điều này sẽ ngăn cản bất kỳ ai, kể cả bạn, có thể trực tiếp đẩy code lên main. Mọi thay đổi đều phải thông qua Pull Request.
		b. Sử dụng .gitignore
		File .gitignore giúp bạn loại trừ các file và thư mục không cần thiết khỏi Git, như thư mục vendor (chứa các thư viện của Laravel), file .env, hoặc các file cache. Điều này giữ cho repository gọn gàng và an toàn.
		c. Viết thông điệp Commit rõ ràng
		Thống nhất một quy tắc viết thông điệp commit. Ví dụ:
			feat: Thêm tính năng đăng nhập bằng Google
			fix: Sửa lỗi hiển thị trên trang sản phẩm
			refactor: Tối ưu hóa lại hàm xử lý đơn hàng
		d. Sử dụng GitHub Projects và Issues
			GitHub có các công cụ quản lý dự án tích hợp như Issues và Projects. Bạn có thể tạo các Issues để mô tả các công việc cần làm (ví dụ: "Thiết kế trang hồ sơ người dùng"). Sau đó, gán các Issues này cho từng thành viên. Khi một thành viên tạo PR, họ có thể liên kết PR đó với Issue, giúp việc theo dõi tiến độ dễ dàng hơn.
