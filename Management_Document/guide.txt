Đồ án môn Quản lý dự án phần mềm - Đề tài: Quản lý dự án FriendMart-Social Commerce Website.
	Số lượng thành viên 5 người.
	Sản phẩm: FriendMart-Social Commerce Website Laravel PHP
	Mô hình quản lý: Agiel
	Để triển khai dự án chúng ta cần làm những gì hãy trình bày từ tổng quan đến chi tiết triển khai dự án
	-	Triển khai dự án
	-	Quản lý tích hợp
	-	Quản lý phạm vi
	-	Quản lý ước lượng
	-	Kiểm soát dự án
	-	Quản lý rủi ro
	-	Quản lý nguồn nhân lực
	
	Hướng dẫn sử dụng các công cụ sau vào dự án cho hợp lý linh hoạt
		- MS Visio 2010
		- Jira Software
		- Notion
		- WBS
		- Git 
		- JUnit
		- PHPUnit
		- Apache Jmeter
Answer 03:
	Để triển khai dự án FriendMart-Social Commerce Website theo mô hình Agile với 5 thành viên, bạn cần một kế hoạch rõ ràng và linh hoạt. Dưới đây là trình bày chi tiết từ tổng quan đến các phần quản lý cụ thể, cùng với hướng dẫn sử dụng các công cụ mà bạn đã nêu.

	I. Tổng quan về triển khai dự án
		Đầu tiên, bạn cần xác định tầm nhìn dự án (project vision) và các mục tiêu của sản phẩm. Sau đó, chia dự án thành các giai đoạn phát triển lặp lại (iterations), thường được gọi là Sprint, kéo dài khoảng 2-4 tuần. Trong mỗi Sprint, nhóm sẽ tập trung vào việc hoàn thành một nhóm chức năng cụ thể.
		Giai đoạn lập kế hoạch (Planning): Xác định các tính năng cần phát triển cho Sprint đầu tiên.
		Giai đoạn thực thi (Execution): Nhóm tiến hành code, họp Daily Scrum, và giải quyết các vấn đề.
		Giai đoạn xem xét (Review): Thuyết trình sản phẩm đã hoàn thành cho các bên liên quan.
		Giai đoạn cải tiến (Retrospective): Nhóm cùng nhau rút kinh nghiệm để cải thiện quy trình làm việc cho các Sprint sau.

	II. Triển khai các mặt quản lý dự án
		1. Quản lý tích hợp (Integration Management)
			Quản lý tích hợp đảm bảo rằng tất cả các phần của dự án được phối hợp ăn ý.
			Lộ trình sản phẩm (Product Roadmap): Xây dựng lộ trình tổng thể cho dự án. Ví dụ:
			Sprint 1: Các tính năng cơ bản (đăng nhập, đăng ký, hồ sơ cá nhân).
			Sprint 2: Tính năng bán hàng (thêm sản phẩm, giỏ hàng, thanh toán).
			Sprint 3: Tính năng mạng xã hội (theo dõi, bình luận, đánh giá).
			Họp Daily Scrum: Tổ chức các cuộc họp ngắn (15 phút) mỗi ngày để các thành viên cập nhật công việc, những gì đã làm, sẽ làm và khó khăn đang gặp phải.
			Tích hợp liên tục (Continuous Integration - CI): Đảm bảo mã nguồn được hợp nhất thường xuyên. Sử dụng Git với các nhánh tính năng (feature branches) và Pull Request để review code trước khi gộp vào nhánh chính.

		2. Quản lý phạm vi (Scope Management)
			Phạm vi dự án trong Agile rất linh hoạt. Bạn sử dụng Product Backlog để quản lý các yêu cầu.
			Product Backlog: Đây là danh sách tất cả các yêu cầu và tính năng cần có của dự án. Mỗi mục trong backlog được gọi là User Story.
			Sprint Backlog: Vào đầu mỗi Sprint, nhóm sẽ chọn các User Story từ Product Backlog để làm trong Sprint đó.
			Sử dụng Jira Software: Tạo các Epic (nhóm các tính năng lớn) và các User Story tương ứng. Di chuyển các User Story vào Sprint Backlog và theo dõi trạng thái công việc (To-do, In Progress, Done) trên bảng Kanban hoặc Scrum.

		3. Quản lý ước lượng (Estimation Management)
			Ước lượng trong Agile thường không dùng giờ mà dùng Story Points.
			Story Points: Là một đơn vị tương đối để ước tính độ phức tạp của một User Story. Nhóm sẽ sử dụng kỹ thuật Planning Poker để cùng nhau ước lượng.
			Tốc độ phát triển (Velocity): Sau mỗi Sprint, nhóm sẽ đo lường số Story Points đã hoàn thành. Đây là chỉ số để ước tính khả năng hoàn thành công việc của nhóm trong các Sprint tiếp theo.

		4. Kiểm soát dự án (Project Control)
			Kiểm soát dự án để đảm bảo nó đi đúng hướng.
			Biểu đồ Burndown: Sử dụng biểu đồ Burndown trong Jira Software để theo dõi tiến độ của Sprint, giúp nhóm biết còn bao nhiêu công việc phải làm.
			JUnit và PHPUnit: Các lập trình viên sử dụng các công cụ này để viết unit tests cho code của mình. Việc kiểm thử tự động giúp đảm bảo chất lượng code và phát hiện lỗi sớm.
			Apache JMeter: Sử dụng công cụ này để thực hiện kiểm thử hiệu năng (performance testing), đảm bảo website hoạt động ổn định khi có nhiều người dùng truy cập cùng lúc.

		5. Quản lý rủi ro (Risk Management)
			Quản lý rủi ro được thực hiện liên tục trong suốt dự án.
			Họp Retrospective: Trong mỗi cuộc họp Retrospective, nhóm sẽ cùng nhau thảo luận về các rủi ro có thể xảy ra và đưa ra phương án giảm thiểu. Ví dụ: "rủi ro thiếu người có kinh nghiệm về API", giải pháp là "một thành viên sẽ dành thời gian học và chia sẻ lại".
			Ma trận rủi ro: Lập một ma trận đơn giản để đánh giá mức độ ảnh hưởng và xác suất xảy ra của từng rủi ro.

		6. Quản lý nguồn nhân lực (Human Resource Management)
			Phân công vai trò:
			Bạn (Project Manager): Đóng vai trò Scrum Master, chịu trách nhiệm hướng dẫn nhóm, loại bỏ các trở ngại và đảm bảo quy trình Agile được tuân thủ.
			Product Owner (có thể là một thành viên): Chịu trách nhiệm quản lý Product Backlog và xác định các yêu cầu.
			Developers (những người còn lại): Thực hiện công việc code.
			Sử dụng Notion: Tạo một không gian làm việc trên Notion để lưu trữ các tài liệu quan trọng của dự án như kế hoạch, các quyết định, tài liệu thiết kế (được tạo bằng MS Visio 2010), và quy trình làm việc.
		
	III.	Hướng dẫn sử dụng các công cụ
		Jira Software: Dùng để quản lý các Epic, User Story, Sprint, và theo dõi tiến độ bằng các biểu đồ.

		Notion: Sử dụng để lưu trữ các tài liệu, ghi chú cuộc họp, và tạo các tài liệu thiết kế, bao gồm cả các bản vẽ từ Visio.

		Git: Dùng để quản lý mã nguồn, tạo các nhánh để làm việc độc lập. Các thành viên nên tạo PR để được review code trước khi gộp vào nhánh chính (main).

		MS Visio 2010: Dùng để vẽ các sơ đồ thiết kế như Sơ đồ cơ sở dữ liệu (ERD), Biểu đồ luồng dữ liệu (DFD) và Sơ đồ WBS. Các sơ đồ này sẽ được lưu trữ trên Notion.

		WBS (Work Breakdown Structure): Mặc dù đây là một kỹ thuật của mô hình Waterfall, bạn vẫn có thể áp dụng nó ở cấp độ cao để chia nhỏ dự án thành các giai đoạn lớn (Ví dụ: Frontend, Backend, Database).

		JUnit & PHPUnit: Các công cụ này được sử dụng để kiểm thử mã nguồn, đảm bảo chất lượng code.

		Apache Jmeter: Sử dụng để kiểm tra khả năng chịu tải của hệ thống, giúp đảm bảo website hoạt động tốt ngay cả khi có nhiều người truy cập.




Question 04: Tiếp theo hãy tiến hành triển khai dự án tại nội dung sau
	- Hướng dẫn tổng quan đến chi tiết thực hiện công việc này
	- Gợi ý các câu hỏi đặt ra cần trả lời tại mỗi công việc
	- Sử dụng các công cụ ntn cho hiệu quả
	- Danh sách các việc cần làm
	- Phân công các thành viên
	II. Triển khai các mặt quản lý dự án
		1. Quản lý tích hợp (Integration Management)
			Quản lý tích hợp đảm bảo rằng tất cả các phần của dự án được phối hợp ăn ý.
			Lộ trình sản phẩm (Product Roadmap): Xây dựng lộ trình tổng thể cho dự án. Ví dụ:
			Sprint 1: Các tính năng cơ bản (đăng nhập, đăng ký, hồ sơ cá nhân).
			Sprint 2: Tính năng bán hàng (thêm sản phẩm, giỏ hàng, thanh toán).
			Sprint 3: Tính năng mạng xã hội (theo dõi, bình luận, đánh giá).
			Họp Daily Scrum: Tổ chức các cuộc họp ngắn (15 phút) mỗi ngày để các thành viên cập nhật công việc, những gì đã làm, sẽ làm và khó khăn đang gặp phải.
			Tích hợp liên tục (Continuous Integration - CI): Đảm bảo mã nguồn được hợp nhất thường xuyên. Sử dụng Git với các nhánh tính năng (feature branches) và Pull Request để review code trước khi gộp vào nhánh chính.

		2. Quản lý phạm vi (Scope Management)
			Phạm vi dự án trong Agile rất linh hoạt. Bạn sử dụng Product Backlog để quản lý các yêu cầu.
			Product Backlog: Đây là danh sách tất cả các yêu cầu và tính năng cần có của dự án. Mỗi mục trong backlog được gọi là User Story.
			Sprint Backlog: Vào đầu mỗi Sprint, nhóm sẽ chọn các User Story từ Product Backlog để làm trong Sprint đó.
			Sử dụng Jira Software: Tạo các Epic (nhóm các tính năng lớn) và các User Story tương ứng. Di chuyển các User Story vào Sprint Backlog và theo dõi trạng thái công việc (To-do, In Progress, Done) trên bảng Kanban hoặc Scrum.

Answer 04:
 
Question 05:
Answer 05:

Question 06:
Answer 06:

